"""The root of all... queries"""
type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  me: User
  posts(after: String, first: Int, before: String, last: Int): PostConnection!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""User data"""
type User implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose _id"""
  _id: String!
  name: String
  email: String
  posts(after: String, first: Int, before: String, last: Int): PostConnection!
  comments(after: String, first: Int, before: String, last: Int): CommentConnection!
  createdAt: String
  updatedAt: String
}

"""A connection to a list of items."""
type PostConnection {
  """Number of items in this connection"""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
    This allows a client to fetch the first five objects by passing "5" as the
    argument to "first", then fetch the total count so it could display "5 of 83",
    for example.
  """
  totalCount: Int

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [PostEdge]!
}

"""Information about pagination in a connection."""
type PageInfoExtended {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge"""
  node: Post

  """A cursor for use in pagination"""
  cursor: String!
}

"""Post data"""
type Post implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose _id"""
  _id: String!
  content: String
  author: User
  likesCount: Int!
  commentsCount: Int!
  comments(after: String, first: Int, before: String, last: Int): CommentConnection!

  """whether logged user liked this post"""
  meHasLiked: Boolean!
  createdAt: String
  updatedAt: String
}

"""A connection to a list of items."""
type CommentConnection {
  """Number of items in this connection"""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
    This allows a client to fetch the first five objects by passing "5" as the
    argument to "first", then fetch the total count so it could display "5 of 83",
    for example.
  """
  totalCount: Int

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [CommentEdge]!
}

"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge"""
  node: Comment

  """A cursor for use in pagination"""
  cursor: String!
}

"""Comment data"""
type Comment implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose _id"""
  _id: String!
  body: String
  user: User
  post: Post
  likesCount: Int!

  """whether logged user liked this post"""
  meHasLiked: Boolean!
  createdAt: String
  updatedAt: String
}

type Mutation {
  UserLoginWithEmail(input: UserLoginWithEmailInput!): UserLoginWithEmailPayload
  UserRegisterWithEmail(input: UserRegisterWithEmailInput!): UserRegisterWithEmailPayload
  PostCreate(input: PostCreateInput!): PostCreatePayload
  PostLike(input: PostLikeInput!): PostLikePayload
  PostUnLike(input: PostUnLikeInput!): PostUnLikePayload
  CommentLike(input: CommentLikeInput!): CommentLikePayload
  CommentUnLike(input: CommentUnLikeInput!): CommentUnLikePayload
  PostCommentCreate(input: PostCommentCreateInput!): PostCommentCreatePayload
}

type UserLoginWithEmailPayload {
  token: String
  me: User
  error: String
  success: String
  clientMutationId: String
}

input UserLoginWithEmailInput {
  email: String!
  password: String!
  clientMutationId: String
}

type UserRegisterWithEmailPayload {
  token: String
  me: User
  error: String
  success: String
  clientMutationId: String
}

input UserRegisterWithEmailInput {
  name: String!
  email: String!
  password: String!
  clientMutationId: String
}

type PostCreatePayload {
  postEdge: PostEdge
  error: String
  success: String
  clientMutationId: String
}

input PostCreateInput {
  content: String!
  clientMutationId: String
}

type PostLikePayload {
  post: Post
  error: String
  success: String
  clientMutationId: String
}

input PostLikeInput {
  post: ID!
  clientMutationId: String
}

type PostUnLikePayload {
  post: Post
  error: String
  success: String
  clientMutationId: String
}

input PostUnLikeInput {
  post: ID!
  clientMutationId: String
}

type CommentLikePayload {
  comment: Comment
  error: String
  success: String
  clientMutationId: String
}

input CommentLikeInput {
  comment: ID!
  clientMutationId: String
}

type CommentUnLikePayload {
  comment: Comment
  error: String
  success: String
  clientMutationId: String
}

input CommentUnLikeInput {
  comment: ID!
  clientMutationId: String
}

type PostCommentCreatePayload {
  commentEdge: CommentEdge
  post: Post
  error: String
  success: String
  clientMutationId: String
}

input PostCommentCreateInput {
  post: ID!
  body: String!
  clientMutationId: String
}

type Subscription {
  PostNew(input: PostNewInput!): PostNewPayload
}

type PostNewPayload {
  post: Post
  clientSubscriptionId: String
}

input PostNewInput {
  clientSubscriptionId: String
}
